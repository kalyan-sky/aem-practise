name: AEM Deployment Pipeline

on:
  push:
    branches:
      - master  # Trigger the pipeline when changes are pushed to the main branch
  pull_request:
    branches:
      - master  # Trigger the pipeline for pull requests targeting the main branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Build the project
      run: |
        mvn clean install -PautoInstallSinglePackage  # Use Maven directly

    - name: Run tests
      run: |
        mvn test  # Run unit tests using Maven directly

  deploy:
    runs-on: ubuntu-latest
    needs: build  # Ensure that the build job is completed before deploying

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adoptopenjdk'

    - name: Deploy to AEM on GCP VM
      env:
        AEM_USER: ${{ secrets.AEM_USER }}  # Store AEM credentials in GitHub secrets
        AEM_PASSWORD: ${{ secrets.AEM_PASSWORD }}
        AEM_HOST: ${{ secrets.AEM_HOST }}  # URL or IP of your AEM instance
        GCP_VM_USER: ${{ secrets.GCP_VM_USER }}  # Your GCP VM username (e.g., 'ubuntu')
        GCP_VM_IP: '34.93.255.141'  # The IP of your GCP VM
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}  # The private SSH key for accessing your GCP VM
      run: |
        # Install the SSH client and SCP
        sudo apt-get update
        sudo apt-get install -y openssh-client

        # Save the private SSH key to a file for SSH access
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

        # Copy the built AEM package to the GCP VM
        scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa target/your-package.zip $GCP_VM_USER@$GCP_VM_IP:/home/$GCP_VM_USER/

        # SSH into the GCP VM and deploy the AEM package
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $GCP_VM_USER@$GCP_VM_IP <<EOF
          # Gracefully stop AEM if running
          sudo systemctl stop aem

          # Deploy the package
          unzip -o your-package.zip -d /path/to/aem/installation/directory

          # Optionally, restart AEM
          sudo systemctl start aem
        EOF
